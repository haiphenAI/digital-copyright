"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sunion = sunion;

var _arrayFrom = _interopRequireDefault(require("array-from"));

var _es6Set = _interopRequireDefault(require("es6-set"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sunion() {
  var _this = this;

  for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
    keys[_key] = arguments[_key];
  }

  keys.forEach(function (key) {
    if (_this.data.has(key) && !(_this.data.get(key) instanceof _es6Set.default)) {
      throw new Error("Key ".concat(key, " does not contain a set"));
    }
  });
  var sets = keys.map(function (key) {
    return _this.data.has(key) ? _this.data.get(key) : new _es6Set.default();
  });
  var union = new _es6Set.default(sets.reduce(function (combined, set) {
    return [].concat(_toConsumableArray(combined), _toConsumableArray((0, _arrayFrom.default)(set)));
  }, []));
  return (0, _arrayFrom.default)(union);
}